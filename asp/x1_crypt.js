/**
 * asp crypt 编码器
 * Create at: 2020/11/18 12:06:14
 * Author: Xiaopan233
 */

'use strict';

/*
* @param  {String} pwd   连接密码
* @param  {Array}  data  编码器处理前的 payload 数组
* @return {Array}  data  编码器处理后的 payload 数组
*/
module.exports = (pwd, data, ext={}) => {
// !!!!! TIPS !!!!!
// modify the follwing key with the key generated by "x1_crypt.html"
// 填写用 x1_crypt.html 生成的key
var PublicKey="48263"
var PrivateKey="3307"
var Modulus="45637"


function Crypt(pLngMessage, pLngKey){
      var lLngMod = ''
      var lLngResult = ''
      var lLngIndex = 0
      if(pLngKey % 2 == 0){
      	lLngResult = 1
      	for (lLngIndex = 0; lLngIndex < (pLngKey/2)-1; lLngIndex++) {
      		lLngMod = (pLngMessage * pLngMessage) % Modulus
      		lLngResult = (lLngMod * lLngResult) % Modulus  
      	}
      }
      else{
      	 lLngResult = pLngMessage 
      	 for (lLngIndex = 0; lLngIndex < (pLngKey/2)-1; lLngIndex++) {
      	 	lLngMod = (pLngMessage * pLngMessage) % Modulus 
      		lLngResult = (lLngMod * lLngResult) % Modulus
      	 }
      }
      return lLngResult

}

function NumberToHex(pLngNumber, pLngLength){
	var s = "0".repeat(pLngLength) + pLngNumber.toString(16)
	s = s.substring(s.length-pLngLength,s.length)
	return s
}

var pStrMessage = data['_']
var lLngIndex = ''
var lLngMaxIndex = ''
var lBytAscii = ''
var lLngEncrypted = ''
var res = ''
lLngMaxIndex = pStrMessage.length

if(lLngMaxIndex !== 0){
	for (var i = 0; i < lLngMaxIndex; i++) {
		lBytAscii = pStrMessage[i].charCodeAt()
		lLngEncrypted = Crypt(lBytAscii, PublicKey)
		res = res + NumberToHex(lLngEncrypted, 4)
	}
}
  data[pwd] = res
  delete data['_'];
  return data;
}